name: Rust

on:
  push:
    branches: [ 0.7.x ]
  pull_request:
    branches: [ 0.7.x ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Run check
      run: cargo check

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt -- --check

  rustclippy:
    name: rustclippy
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: clippy
    - name: Clippy check
      run: |
        cargo clippy

  test:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: clippy
    - name: Run tests
      run: |
        cargo test

  publish:
    runs-on: ubuntu-24.04
    needs: [rustfmt, rustclippy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/0.7.x'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        # fetch tags for cargo ws publish
        # might be a simple `fetch-tags: true` option soon, see https://github.com/actions/checkout/pull/579
        fetch-depth: 0

    - name: Setup
      run: |
        git config user.name github-actions
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        cargo install --git https://github.com/miraclx/cargo-workspaces --rev b2d49b9e575e29fd2395352e4d0df47def025039 cargo-workspaces
        export GIT_PREVIOUS_TAG=$(git describe --tags --abbrev=0)
        echo "GIT_PREVIOUS_TAG=${GIT_PREVIOUS_TAG}" >> $GITHUB_ENV
        echo "[ pre run] current latest git tag is \"${GIT_PREVIOUS_TAG}\""
    - name: Publish to crates.io and tag the commit
      id: tag-and-publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cargo ws publish --all --yes --exact \
          --skip-published --no-git-commit --allow-dirty \
          --tag-existing --tag-prefix 'v' \
          --tag-msg 'crates.io snapshot' --tag-msg '%{https://crates.io/crates/%n/%v}' \
          --no-individual-tags --no-git-push
        export GIT_LATEST_TAG=$(git describe --tags --abbrev=0)
        echo "GIT_LATEST_TAG=${GIT_LATEST_TAG}" >> $GITHUB_ENV
        echo "[post run] current latest git tag is \"${GIT_LATEST_TAG}\""
        echo "::set-output name=tagged::$( [[ "$GIT_LATEST_TAG" == "$GIT_PREVIOUS_TAG" ]] && echo 0 || echo 1 )"
        # returning multi-line outputs gets truncated to include only the first line
        # we have to escape the newline chars, runner auto unescapes them later
        # https://github.community/t/set-output-truncates-multiline-strings/16852/3
        GIT_TAG_MESSAGE="$(git tag -l --format='%(body)' ${GIT_LATEST_TAG})"
        GIT_TAG_MESSAGE="${GIT_TAG_MESSAGE//'%'/'%25'}"
        GIT_TAG_MESSAGE="${GIT_TAG_MESSAGE//$'\n'/'%0A'}"
        GIT_TAG_MESSAGE="${GIT_TAG_MESSAGE//$'\r'/'%0D'}"
        echo "::set-output name=git_tag_message::${GIT_TAG_MESSAGE}"
    - name: Push tags to GitHub (if any)
      if: steps.tag-and-publish.outputs.tagged == 1
      run: git push --tags

    - name: Extract release notes
      if: steps.tag-and-publish.outputs.tagged == 1
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@c24866884b7a0d2fd2095be2e406b6f260479da8

    - name: Create release
      if: steps.tag-and-publish.outputs.tagged == 1
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.GIT_LATEST_TAG }}
        release_name: ${{ env.GIT_LATEST_TAG }}
        body: |
          ## What's changed?

          ${{ steps.extract-release-notes.outputs.release_notes }}
          **Crate Link**: ${{ steps.tag-and-publish.outputs.git_tag_message }}
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ env.GIT_PREVIOUS_TAG }}...${{ env.GIT_LATEST_TAG }}
